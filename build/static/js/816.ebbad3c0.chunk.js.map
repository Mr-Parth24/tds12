{"version":3,"file":"static/js/816.ebbad3c0.chunk.js","mappings":"wKAMO,MAyLMA,EAAkBC,UAC7B,IACE,MAAMC,EAAU,OAAOC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,GAAGC,gBAMlE,aAJMC,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASC,GAAM,CACrCC,iBAAkBV,IAGb,CAAEU,iBAAkBV,EAASW,MAAO,KAC7C,CAAE,MAAOA,GAEP,OADAC,QAAQD,MAAM,sCAAuCA,GAC9C,CAAED,iBAAkB,KAAMC,MAAOA,EAAME,QAChD,E","sources":["services/authService.js"],"sourcesContent":["// src/services/authService.js\r\nimport { auth, db, googleProvider } from '../firebase/config';\r\nimport { signInWithEmailAndPassword, signOut, createUserWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\r\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\r\n\r\n// Define valid roles as constants for consistency\r\nexport const ROLES = {\r\n  ADMIN: \"Admin\",\r\n  USER: \"User\"\r\n};\r\n\r\n/**\r\n * Logs in a user using email and password.\r\n */\r\nexport const loginWithEmail = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const userRole = await getUserRole(userCredential.user.uid);\r\n    const orgCode = userRole !== ROLES.ADMIN ? await getOrgCode(userCredential.user.uid) : null;\r\n    \r\n    console.log(\"Auth service: User logged in with role:\", userRole);\r\n    \r\n    return { \r\n      user: userCredential.user, \r\n      role: userRole,\r\n      organizationCode: orgCode,\r\n      error: null \r\n    };\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error);\r\n    return { \r\n      user: null, \r\n      role: null, \r\n      organizationCode: null,\r\n      error: error.message \r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Logs in a user using Google authentication.\r\n */\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const userCredential = await signInWithPopup(auth, googleProvider);\r\n    const user = userCredential.user;\r\n\r\n    // Check if user already has a role\r\n    const userDoc = await getDoc(doc(db, 'users', user.uid));\r\n    let userRole = ROLES.USER; // Default role\r\n    let orgCode = null;\r\n    \r\n    if (!userDoc.exists()) {\r\n      await setDoc(doc(db, 'users', user.uid), {\r\n        email: user.email,\r\n        role: ROLES.USER, // Default role\r\n        joinedAt: new Date().toISOString(),\r\n      });\r\n    } else {\r\n      userRole = userDoc.data().role;\r\n      // Validate role\r\n      if (userRole !== ROLES.USER && userRole !== ROLES.ADMIN) {\r\n        userRole = ROLES.USER;\r\n        // Update with valid role if needed\r\n        await updateDoc(doc(db, 'users', user.uid), { role: ROLES.USER });\r\n      }\r\n      orgCode = userRole !== ROLES.ADMIN ? userDoc.data().organizationCode : null;\r\n    }\r\n\r\n    console.log(\"Auth service: Google sign-in with role:\", userRole);\r\n    \r\n    return { \r\n      user, \r\n      role: userRole,\r\n      organizationCode: orgCode,\r\n      error: null \r\n    };\r\n  } catch (error) {\r\n    console.error(\"Google sign-in error:\", error);\r\n    return { \r\n      user: null, \r\n      role: null,\r\n      organizationCode: null,\r\n      error: error.message \r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Registers a new user with email and password.\r\n * Assigns role and organization code if applicable.\r\n */\r\nexport const registerUser = async (email, password, role, organizationCode = null) => {\r\n  try {\r\n    // Validate role - ensure we only use valid roles\r\n    if (role !== ROLES.USER && role !== ROLES.ADMIN) {\r\n      console.warn(`Invalid role \"${role}\" provided, defaulting to User`);\r\n      role = ROLES.USER;\r\n    }\r\n    \r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n\r\n    const userData = {\r\n      email,\r\n      role,\r\n      joinedAt: new Date().toISOString(),\r\n    };\r\n\r\n    // If user is not an Admin, attach organization code\r\n    if (role !== ROLES.ADMIN && organizationCode) {\r\n      userData.organizationCode = organizationCode;\r\n    }\r\n\r\n    await setDoc(doc(db, 'users', user.uid), userData);\r\n    \r\n    console.log(\"Auth service: Registered user with role:\", role);\r\n\r\n    return { \r\n      user, \r\n      role,\r\n      organizationCode: role !== ROLES.ADMIN ? organizationCode : null,\r\n      error: null \r\n    };\r\n  } catch (error) {\r\n    console.error(\"Registration error:\", error);\r\n    return { \r\n      user: null, \r\n      role: null,\r\n      organizationCode: null,\r\n      error: error.message \r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Logs out the user.\r\n */\r\nexport const logoutUser = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    return { error: null };\r\n  } catch (error) {\r\n    console.error(\"Logout error:\", error);\r\n    return { error: error.message };\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches the user's role.\r\n */\r\nexport const getUserRole = async (uid) => {\r\n  try {\r\n    const userDoc = await getDoc(doc(db, 'users', uid));\r\n    if (userDoc.exists()) {\r\n      const role = userDoc.data().role;\r\n      \r\n      // Validate role\r\n      if (role !== ROLES.ADMIN && role !== ROLES.USER) {\r\n        console.warn(`Invalid role \"${role}\" for user ${uid}, defaulting to User`);\r\n        return ROLES.USER;\r\n      }\r\n      \r\n      return role;\r\n    }\r\n    return ROLES.USER; // Default to User if no role found\r\n  } catch (error) {\r\n    console.error('Error fetching user role:', error);\r\n    return ROLES.USER; // Default to User on error\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches the organization code for a user.\r\n */\r\nexport const getOrgCode = async (uid) => {\r\n  try {\r\n    const userDoc = await getDoc(doc(db, 'users', uid));\r\n    if (userDoc.exists()) {\r\n      return userDoc.data().organizationCode || null;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error fetching organization code:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Generates a new organization code for an admin.\r\n */\r\nexport const generateOrgCode = async (uid) => {\r\n  try {\r\n    const orgCode = `TDS-${Math.random().toString(36).substring(2, 8).toUpperCase()}`;\r\n\r\n    await updateDoc(doc(db, 'users', uid), {\r\n      organizationCode: orgCode,\r\n    });\r\n\r\n    return { organizationCode: orgCode, error: null };\r\n  } catch (error) {\r\n    console.error('Error generating organization code:', error);\r\n    return { organizationCode: null, error: error.message };\r\n  }\r\n};\r\n\r\n/**\r\n * Validates the organization code.\r\n */\r\nexport const validateOrgCode = async (orgCode) => {\r\n  try {\r\n    // Note: This implementation might not be correct\r\n    // It's trying to get a user document using the orgCode as the ID\r\n    // A better approach would be to query for users with this organization code\r\n    const usersSnapshot = await getDoc(doc(db, 'users', orgCode));\r\n\r\n    if (usersSnapshot.exists()) {\r\n      return { valid: true, error: null };\r\n    }\r\n\r\n    return { valid: false, error: 'Invalid organization code' };\r\n  } catch (error) {\r\n    console.error('Error validating organization code:', error);\r\n    return { valid: false, error: error.message };\r\n  }\r\n};"],"names":["generateOrgCode","async","orgCode","Math","random","toString","substring","toUpperCase","updateDoc","doc","db","uid","organizationCode","error","console","message"],"sourceRoot":""}